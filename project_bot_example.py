import requests
import asyncio
import aiogram
import datetime
import aioschedule
import sqlite3
import config as cfg
from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.dispatcher.filters import Text
from googletrans import Translator
from bs4 import BeautifulSoup
from config import tg_bot_token, open_weather_token, currency_url


bot = Bot(token=tg_bot_token, parse_mode=types.ParseMode.HTML)
dp = Dispatcher(bot)

listlang = cfg.LANGUES
translator = Translator()

conn = sqlite3.connect('botinformation.db')
print('started')

@dp.message_handler(commands="start")
async def start(message: types.Message):
    start_buttons = ["üëã –ü–æ–∑–¥–æ—Ä–æ–≤–∞—Ç—å—Å—è"]
    start_keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    start_keyboard.add(*start_buttons)
    await message.answer("–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é! –Ø –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–π –±–æ—Ç", reply_markup=start_keyboard)
    cursor = conn.cursor()
    sql = "SELECT * FROM users WHERE id = ?"
    adr = (str(message.from_user.id),)
    cursor.execute(sql, adr)
    user_result = cursor.fetchall()
    print(user_result)
    if user_result is None or user_result == [] or user_result == ():
        cursor = conn.cursor()
        sql = "INSERT INTO users (id, lang) VALUES (?, ?)"
        user = (str(message.from_user.id), "ru")
        cursor.execute(sql, user)
        conn.commit()
        await message.answer("–¢—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ –º–æ–µ–π –±–∞–∑–µ –±–∞–Ω–Ω—ã—Ö")
    else:
        await message.answer("–¢—ã —É–∂–µ –µ—Å—Ç—å –≤ –º–æ–µ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")


@dp.message_handler(Text(equals="üëã –ü–æ–∑–¥–æ—Ä–æ–≤–∞—Ç—å—Å—è"))
async def select(message: types.Message):
    await message.answer(f"–ü—Ä–∏–≤–µ—Ç, <b><u>{message.from_user.first_name} {message.from_user.last_name}</u></b>\n")
    select_buttons = ["–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ", "–£–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É", "–£–∑–Ω–∞—Ç—å –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç –±–µ–ª–æ—Ä—É—Å—Å–∫–æ–≥–æ —Ä—É–±–ª—è",
                     "–£–∑–Ω–∞—Ç—å —Ü–µ–Ω—ã –Ω–∞ –±–µ–Ω–∑–∏–Ω –≤ –ë–µ–ª–∞—Ä—É—Å–∏", "–ü–µ—Ä–µ–≤–æ–¥—á–∏–∫", "–ú–µ–ª–æ–¥–∏—è –¥–Ω—è", "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]
    select_keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    select_keyboard.add(*select_buttons)
    await message.answer("–ß—Ç–æ —Ç–µ–±—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?", reply_markup=select_keyboard)

@dp.message_handler(Text(equals="–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ"))
async def select(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç. –ù–∞–ø–∏—à–∏ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è, –∫–æ–≥–¥–∞ —Ç–µ–±—è –æ–ø–æ–≤–µ—Å—Ç–∏—Ç—å")

async def notify_message():
    await bot.send_message(chat_id=479054430, text='–ü—Ä–∏–≤–µ—Ç! –¢—ã –ø–æ–ø—Ä–æ—Å–∏–ª —Å–æ–æ–±—â–∏—Ç—å —Ç–µ–±–µ, —á—Ç–æ...')

async def notify():
    aioschedule.every().day.at("19:56").do(notify_message)
    while True:
        await aioschedule.run_pending()
        await asyncio.sleep(1)

async def on_startup(_):
    asyncio.create_task(notify())

@dp.message_handler(Text(equals="–£–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É"))
async def weather(message: types.Message):
    weather_buttons = ["–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]
    weather_keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    weather_keyboard.add(*weather_buttons)
    await message.answer("–ù–∞–ø–∏—à–∏ –º–Ω–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–≤–æ–µ–≥–æ –≥–æ—Ä–æ–¥–∞ –∏ —è –ø—Ä–∏—à–ª—é —Å–≤–æ–¥–∫—É –ø–æ–≥–æ–¥—ã!", reply_markup=weather_keyboard)

    @dp.message_handler()
    async def get_weather(message: types.Message):
        code_to_smile = {
            "Clear": "–Ø—Å–Ω–æ \U00002600",
            "Clouds": "–û–±–ª–∞—á–Ω–æ \U00002601",
            "Rain": "–î–æ–∂–¥—å \U00002614",
            "Drizzle": "–î–æ–∂–¥—å \U00002614",
            "Thunderstorm": "–ì—Ä–æ–∑–∞ \U000026A1",
            "Snow": "–°–Ω–µ–≥ \U0001F328",
            "Mist": "–¢—É–º–∞–Ω \U0001F32B"
        }

        try:
            reg = requests.get(
                f"http://api.openweathermap.org/data/2.5/weather?q={message.text}&appid={open_weather_token}&units=metric"
            )
            data = reg.json()

            city = data["name"]
            cur_weather = data["main"]["temp"]

            weather_description = data["weather"][0]["main"]
            if weather_description in code_to_smile:
                wd = code_to_smile[weather_description]
            else:
                wd = "–ù–µ –º–æ—É –ø–æ–Ω—è—Ç—å, –∫–∞–∫–∞—è –ø–æ–≥–æ–¥–∞ –∑–∞ –æ–∫–Ω–æ–º!"

            humidity = data["main"]["humidity"]
            pressure = data["main"]["pressure"]
            wind = data["wind"]["speed"]
            sunrise_timestamp = datetime.datetime.fromtimestamp(data["sys"]["sunrise"])
            sunset_timestamp = datetime.datetime.fromtimestamp(data["sys"]["sunset"])
            length_of_the_day = datetime.datetime.fromtimestamp(data["sys"]["sunset"]) - datetime.datetime.fromtimestamp(
                data["sys"]["sunrise"])

            await message.reply(f"*** –î–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ –Ω–∞: <b>{datetime.datetime.now().strftime('%Y-%m-%d %H:%M')}</b> ***\n"
                  f"–ü–æ–≥–æ–¥–∞ –≤ –≥–æ—Ä–æ–¥–µ: <b>{city}</b>\n–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {cur_weather} C¬∞ {wd}\n"
                  f"–í–ª–∞–∂–Ω–æ—Å—Ç—å: {humidity} %\n–î–∞–≤–ª–µ–Ω–∏–µ: {pressure} –º–º.—Ä—Ç.—Å—Ç\n–í–µ—Ç–µ—Ä: {wind} –º/—Å\n"
                  f"–í–æ—Å—Ö–æ–¥ —Å–æ–ª–Ω—Ü–∞: {sunrise_timestamp}\n–ó–∞–∫–∞—Ç —Å–æ–ª–Ω—Ü–∞: {sunset_timestamp}\n–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–Ω—è: {length_of_the_day}\n\n"
                  f"<b>--- –•–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è! üëã ---</b>", reply_markup=weather_keyboard)

        except:
            await message.reply("–ü—Ä–æ–≤–µ—Ä—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–≤–æ–µ–≥–æ –≥–æ—Ä–æ–¥–∞", reply_markup=weather_keyboard)

        back_buttons = ["–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]
        back_keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        back_keyboard.add(*back_buttons)
        await message.answer("–ß—Ç–æ —Ç–µ–±—è –µ—â—ë –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?", reply_markup=back_keyboard)


@dp.message_handler(Text(equals="–£–∑–Ω–∞—Ç—å –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç –±–µ–ª–æ—Ä—É—Å—Å–∫–æ–≥–æ —Ä—É–±–ª—è"))
async def currency(message: types.Message):
    currency_buttons = ["–î–æ–ª–ª–∞—Ä—ã", "–ï–≤—Ä–æ", "–†–æ—Å. —Ä—É–±–ª—å", "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]
    currency_keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    currency_keyboard.add(*currency_buttons)
    await message.answer("–í—ã–±–µ—Ä–∏ –≤–∞–ª—é—Ç—É", reply_markup=currency_keyboard)


    @dp.message_handler(Text(equals="–î–æ–ª–ª–∞—Ä—ã"))
    async def currency_dol(message: types.Message):
        await message.answer("–í—ã–ø–æ–ª–Ω—è—é –∑–∞–¥–∞—á—É. –ü–æ–¥–æ–∂–¥–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–µ–º–Ω–æ–≥–æ!")
        req_dol = requests.get(currency_url)
        response = req_dol.json()
        dol_buy = response[0]["USD_in"]
        dol_sale = response[0]["USD_out"]
        await message.answer(f"--- –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∞ - <b>{datetime.datetime.now().strftime('%Y-%m-%d %H:%M')}</b> ---\n"
                             f"–ü–æ–∫—É–ø–∫–∞ $ –±–∞–Ω–∫–æ–º - <b>{dol_buy} –±–µ–ª.—Ä—É–±</b>\n–ü—Ä–æ–¥–∞–∂–∞ $ –±–∞–Ω–∫–æ–º - <b>{dol_sale} –±–µ–ª.—Ä—É–±</b>",
                             reply_markup=currency_keyboard)

    @dp.message_handler(Text(equals="–ï–≤—Ä–æ"))
    async def currency_euro(message: types.Message):
        await message.answer("–í—ã–ø–æ–ª–Ω—è—é –∑–∞–¥–∞—á—É. –ü–æ–¥–æ–∂–¥–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–µ–º–Ω–æ–≥–æ!")
        req_euro = requests.get(currency_url)
        response = req_euro.json()
        euro_buy = response[0]["EUR_in"]
        euro_sale = response[0]["EUR_out"]
        await message.answer(f"--- –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∞ - <b>{datetime.datetime.now().strftime('%Y-%m-%d %H:%M')}</b> ---\n"
                             f"–ü–æ–∫—É–ø–∫–∞ ‚Ç¨ –±–∞–Ω–∫–æ–º - <b>{euro_buy} –±–µ–ª.—Ä—É–±</b>\n–ü—Ä–æ–¥–∞–∂–∞ ‚Ç¨ –±–∞–Ω–∫–æ–º - <b>{euro_sale} –±–µ–ª.—Ä—É–±</b>",
                             reply_markup=currency_keyboard)

    @dp.message_handler(Text(equals="–†–æ—Å. —Ä—É–±–ª—å"))
    async def currency_rub(message: types.Message):
        await message.answer("–í—ã–ø–æ–ª–Ω—è—é –∑–∞–¥–∞—á—É. –ü–æ–¥–æ–∂–¥–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–µ–º–Ω–æ–≥–æ!")
        req_rub = requests.get(currency_url)
        response = req_rub.json()
        rub_buy = response[0]["RUB_in"]
        rub_sale = response[0]["RUB_out"]
        await message.answer(f"--- –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∞ - <b>{datetime.datetime.now().strftime('%Y-%m-%d %H:%M')}</b> ---\n"
                             f"–ü–æ–∫—É–ø–∫–∞ ‚ÇΩ –±–∞–Ω–∫–æ–º - <b>{rub_buy} –±–µ–ª.—Ä—É–±</b>\n–ü—Ä–æ–¥–∞–∂–∞ ‚ÇΩ –±–∞–Ω–∫–æ–º - <b>{rub_sale} –±–µ–ª.—Ä—É–±</b>",
                             reply_markup=currency_keyboard)

@dp.message_handler(Text(equals="–£–∑–Ω–∞—Ç—å —Ü–µ–Ω—ã –Ω–∞ –±–µ–Ω–∑–∏–Ω –≤ –ë–µ–ª–∞—Ä—É—Å–∏"))
async def fuel(message: types.Message):
    fuel_buttons = ["–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]
    fuel_keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    fuel_keyboard.add(*fuel_buttons)
    await message.answer("–¶–µ–Ω—ã –Ω–∞ –±–µ–Ω–∑–∏–Ω –≤ –ë–µ–ª–∞—Ä—É—Å–∏:", reply_markup=fuel_keyboard)

    headers = {
        "user-agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko)"
                      " Chrome/104.0.5112.102 Safari/537.36"
    }
    url = "https://azs.a-100.by/set-azs/fuel/"
    reg = requests.get(url=url, headers=headers)
    soup = BeautifulSoup(reg.text, "lxml")
    articles_cards = soup.find_all("div", class_="grid__item col-lg-4 col-md-6 col-xs-12")
    article_date_time = soup.find("div", class_="note flc").text.strip()
    article_date_time = article_date_time[-16::]

    for article in articles_cards:
        article_title = article.find("div", class_="cert__title-main h2").text.strip()
        article_desc1 = article.find("strong").text.strip()
        article_desc2 = article.find("sup").text.strip()
        article_desc3 = article.find("small").text.strip()
        if "AdBlue" in article_title:
            continue

        await message.answer(f"{article_title} - {article_desc1}.{article_desc2} {article_desc3}",
                             reply_markup=fuel_keyboard)
    await message.answer(f"* –¶–µ–Ω—ã —É–∫–∞–∑–∞–Ω—ã –ø–æ —Å–æ—Å—Ç–æ—è–Ω–∏—é –Ω–∞ <u>{article_date_time}</u>",
                         reply_markup=fuel_keyboard)

@dp.message_handler(Text(equals="–ü–µ—Ä–µ–≤–æ–¥—á–∏–∫"))
async def translate(message: types.Message):
    keyb = InlineKeyboardMarkup()
    for i, j in cfg.LANGDICT.items():
        key = InlineKeyboardButton(j, callback_data=i)
        keyb.add(key)
    await message.answer("–í—ã–±–µ—Ä–∏ —è–∑—ã–∫ –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –∂–µ–ª–∞–µ—à—å –ø–µ—Ä–µ–≤–µ—Å—Ç–∏", reply_markup=keyb)

    @dp.callback_query_handler(lambda c: c.data)
    async def process_callback(callback_query: aiogram.types.CallbackQuery):
        if callback_query.data in cfg.LANGUES:
            lang = callback_query.data
            cursor = conn.cursor()
            sql = "UPDATE users SET lang = ? WHERE id = ?"
            val = (lang, str(callback_query.from_user.id))
            cursor.execute(sql, val)

            await bot.send_message(callback_query.from_user.id, "–¢—ã –≤—ã–±—Ä–∞–ª —è–∑—ã–∫ - " + cfg.LANGDICT[lang])

    @dp.message_handler()
    async def translat_message(message: types.Message):
        cursor = conn.cursor()
        sql = "SELECT * FROM users WHERE id = ?"
        adr = (message.from_user.id,)
        cursor.execute(sql, adr)
        user_result = cursor.fetchall()
        lang = user_result[0][1]
        word = translator.translate(message.text, dest=lang).text

        await bot.send_message(message.from_user.id, word)

        translate_back_buttons = ["–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]
        translate_back_keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
        translate_back_keyboard.add(*translate_back_buttons)
        await message.answer("–ß—Ç–æ –µ—â–µ –∂–µ–ª–∞–µ—à—å –ø–µ—Ä–µ–≤–µ—Å—Ç–∏? –ò–ª–∏ –≤–µ—Ä–Ω–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=translate_back_keyboard)

@dp.message_handler(Text(equals="–ú–µ–ª–æ–¥–∏—è –¥–Ω—è"))
async def melody(message: types.Message):
    buttons_melody = ["–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]
    keyboard_melody = types.ReplyKeyboardMarkup(resize_keyboard=True)
    melody_keyboard = types.InlineKeyboardMarkup()
    keyboard_melody.add(*buttons_melody)
    melody_keyboard.add(types.InlineKeyboardButton("–ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç —Ü–µ–Ω—Ç—Ä FM", url="https://centerfm.by/ru"))
    await message.answer("–ú–µ–ª–æ–¥–∏—è –¥–Ω—è", reply_markup=melody_keyboard)

@dp.message_handler(Text(equals="–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"))
async def back(message: types.Message):
    buttons_back = ["–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ", "–£–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É", "–£–∑–Ω–∞—Ç—å –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç –±–µ–ª–æ—Ä—É—Å—Å–∫–æ–≥–æ —Ä—É–±–ª—è",
               "–£–∑–Ω–∞—Ç—å —Ü–µ–Ω—ã –Ω–∞ –±–µ–Ω–∑–∏–Ω –≤ –ë–µ–ª–∞—Ä—É—Å–∏", "–ü–µ—Ä–µ–≤–æ–¥—á–∏–∫", "–ú–µ–ª–æ–¥–∏—è –¥–Ω—è", "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]
    keyboard_back = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard_back.add(*buttons_back)
    await message.answer("–¢—ã –≤–µ—Ä–Ω—É–ª—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é! –ß—Ç–æ —Ç–µ–±—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?", reply_markup=keyboard_back)

if __name__ == '__main__':
    executor.start_polling(dp, on_startup=on_startup)